{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"finishing-the-cart\">Finishing the Cart</h1>\n<p>At <code>MenuPage</code> and <code>DetailsPage</code> add calls to <code>addToCart</code> function importing it first.</p>\n<p>Create a new file </p>\n<h2 id=\"componentscartitemjs\">components/CartItem.js</h2>\n<pre><code class=\"language-js\">import { removeFromCart } from &quot;../services/Order.js&quot;;\n\nexport default class CartItem extends HTMLElement {\n    constructor() {\n        super();    \n    }   \n\n    connectedCallback() {\n        const item = JSON.parse(this.dataset.item);\n        this.innerHTML = &quot;&quot;; // Clear the element\n\n        const template = document.getElementById(&quot;cart-item-template&quot;);\n        const content = template.content.cloneNode(true);\n\n        this.appendChild(content);    \n\n        this.querySelector(&quot;.qty&quot;).textContent = `${item.quantity}x`;\n        this.querySelector(&quot;.name&quot;).textContent = item.product.name;\n        this.querySelector(&quot;.price&quot;).textContent = `$${item.product.price.toFixed(2)}`;\n        this.querySelector(&quot;a.delete-button&quot;).addEventListener(&quot;click&quot;, event =&gt; {\n            removeFromCart(item.product.id);\n        })\n      }\n}\n\ncustomElements.define(&quot;cart-item&quot;, CartItem);\n</code></pre>\n<h2 id=\"updating-the-page\">Updating the Page</h2>\n<p>Then, at <code>components/OrderPage.js</code> add the following code</p>\n<pre><code class=\"language-js\">export default class OrderPage extends HTMLElement {\n\n  constructor() {\n      super();\n  \n      this.root = this.attachShadow({ mode: &quot;open&quot; });    \n      const styles = document.createElement(&quot;style&quot;);\n      this.root.appendChild(styles);\n      const section = document.createElement(&quot;section&quot;);\n      this.root.appendChild(section);\n\n      async function loadCSS() {\n        const request = await fetch(&quot;/components/OrderPage.css&quot;);\n        styles.textContent = await request.text();\n      }\n      loadCSS();\n  }   \n\n  connectedCallback() {\n    window.addEventListener(&quot;appcartchange&quot;, () =&gt; {\n      this.render();\n    })\n    this.render();\n  }\n\n  render() {\n    let section = this.root.querySelector(&quot;section&quot;);   \n    if (app.store.cart.length==0) {     \n      section.innerHTML = `\n          &lt;p class=&quot;empty&quot;&gt;Your order is empty&lt;/p&gt;\n      `;\n    } else {\n      let html = `\n          &lt;h2&gt;Your Order&lt;/h2&gt;\n          &lt;ul&gt;\n          &lt;/ul&gt;\n      `;\n      section.innerHTML = html;\n\n      const template = document.getElementById(&quot;order-form-template&quot;);\n      const content = template.content.cloneNode(true);\n      section.appendChild(content);\n\n      let total = 0;\n      for (let prodInCart of app.store.cart) {      \n          const item = document.createElement(&quot;cart-item&quot;);\n            item.dataset.item = JSON.stringify(prodInCart);\n          this.root.querySelector(&quot;ul&quot;).appendChild(item);\n        \n          total += prodInCart.quantity * prodInCart.product.price;\n      }\n      this.root.querySelector(&quot;ul&quot;).innerHTML += `\n            &lt;li&gt;\n                &lt;p class=&#39;total&#39;&gt;Total&lt;/p&gt;\n                &lt;p class=&#39;price-total&#39;&gt;$${total.toFixed(2)}&lt;/p&gt;\n            &lt;/li&gt;                \n        `;            \n    }\n  }\n}\n</code></pre>\n","slug":"finishing-the-cart","title":"Finishing the Cart","section":"Reactive Programming","icon":"chain","filePath":"/Users/firt/Library/Mobile Documents/com~apple~CloudDocs/Trainings/FEM/YDNTL/vanilla/lessons/05-reactive-programming/G-finishing-the-cart.md","nextSlug":"/vanilla/lessons/reactive-programming/binding-form-data","prevSlug":"/vanilla/lessons/reactive-programming/listening-for-cart-updates"}},"__N_SSG":true}